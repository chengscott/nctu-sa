#!/usr/local/bin/python3.6
import argparse
import os
import signal
import sys
import threading
import yaml
from time import sleep


def load_config():
    def to_sec(period):
        n, c = int(period[:-1]), period[-1]
        time = {
            's': 1,
            'm': 60,
            'h': 60 * 60,
            'd': 60 * 60 * 24,
            'w': 60 * 60 * 24 * 7,
        }
        return n * time[c]

    def gcd(numbers):
        from functools import reduce
        from math import gcd

        return reduce(gcd, numbers)

    config = {}
    with open(config_file) as f:
        config = yaml.load(f.read())
    config = [c for c in config['backup'] if c.get('enabled', True)]
    for c in config:
        c['period'] = to_sec(c['period'])
        c['cur'] = 0
    period = gcd([c['period'] for c in config])
    return config, period


def run_thread():
    global event, cfg, period
    while True:
        for c in cfg:
            if c['cur'] == 0:
                c['cur'] = (c['cur'] + period) % c['period']
                dataset, rotation = c['dataset'], c.get('rotation', '')
                os.system(f'/usr/local/bin/zbackup {dataset} {rotation}')
        event.wait(timeout=period)
        event.clear()


def run_main():
    while True:
        signal.pause()


def sig_reload(sig, frame):
    global event, cfg, period
    cfg, period = load_config()
    event.set()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', action='store_true')
    parser.add_argument('-c', default='/usr/local/etc/zbackupd.yaml')
    parser.add_argument('-p', default='/var/run/zbackup.pid')
    args = parser.parse_args()
    if os.path.isfile(args.p):
        print('Error: zbackupd is already running.', file=sys.stderr)
        exit(-1)
    if not os.path.isfile(args.c):
        print(f'Error: {args.c} does not exists.', file=sys.stderr)
        exit(-1)
    if args.d:
        pid = os.fork()
        if pid != 0:
            with open(args.p, 'w') as f:
                f.write(str(pid))
            exit(0)
    global config_file, event, cfg, period
    config_file = args.c
    signal.signal(signal.SIGUSR1, sig_reload)
    cfg, period = load_config()
    threading.Thread(target=run_thread).start()
    event = threading.Event()
    run_main()


if __name__ == '__main__':
    main()
